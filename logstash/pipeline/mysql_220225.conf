input {
  jdbc {
    #ダウンロードしたMySQL Connector/Jのパスを記述します。相対パスで記述する場合は、Logstashを実行するディレクトリからの相対パス
    jdbc_driver_library => "./mysql-connector-java-8.0.28.jar"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    #jdbc_connection_string: jdbc:mysql://{MYSQL_HOST}:{PORT}/{DATABASE_NAME}
    jdbc_connection_string => "jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}"
    #MySQL のユーザー名を記述
    jdbc_user => "root"
    #MySQL ユーザーのパスワードを記述
    jdbc_password => "${MYSQL_ROOT_PASSWORD}"
    #sqlのタイムゾーンに合わせる
    jdbc_default_timezone => "Asia/Tokyo"
    #最後にMySQLから読み取ったドキュメントを追跡するのに使用
    tracking_column => "unix_ts_in_secs"
    tracking_column_type => "numeric"
    #tracking_columnに指定した値を:sql_last_valueに保存するように設定
    use_column_value => true
    #データローディングジョブの起動間隔を30秒おきに
    schedule => "* * * * *"
    #SQLステートメントを複数のクエリに分割する
    jdbc_paging_enabled => true
    #jdbc_fetch_size => 1000
    #statement: MySQL からデータを抽出するためのSELECT文を記述
    statement => "SELECT no, title, text, UNIX_TIMESTAMP(refixdate) AS unix_ts_in_secs FROM jawiki_articles WHERE (UNIX_TIMESTAMP(refixdate) > :sql_last_value AND refixdate < NOW()) ORDER BY refixdate ASC"
    #使用前に接続をチェック
    jdbc_validate_connection => true
    #type: filter や output ステージで特定のイベントを識別するための識別名を設定
    type => "doc_ngram_wakati"
  }
}

filter {
  mutate {
    # MySQLのカラム名textをtext_ngramに変更
    rename => {"text" => "text_ngram"}
    # text_ngramをtext_morphにコピー
    copy => {"text_ngram" => "text_morph"}
    copy => {"no" => "[@metadata][_id]"}
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch01:9200"]
    index => "jawiki_articles"
    template => "/index_template/jawiki_index.json"
    template_name => "jawiki_index"
    manage_template => true
    template_overwrite => false
    document_id => "%{no}"
    action => "update"
    doc_as_upsert => true
  }
}